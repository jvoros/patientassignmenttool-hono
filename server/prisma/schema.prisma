// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  engineType = "library"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Site {
  site      String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  details   Json     @db.Json
  board     Json     @db.Json
  patients  Patient[]
  logs      Log[]
}

// model User {
//   userId      String   @id @default(uuid())
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   email       String   @unique
//   password    String?
//   phone       String?
//   role        String
//   sites       Site[]
// }

// model Shift {
//   shiftId     String   @id @default(uuid())
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   name        String
//   bonus       Int
//   joinZones   Zone[]
//   role        Role
//   site        Site     @relation(fields: [siteId], references: [site])
//   siteId      String
// }

// enum Role {
//   ADMIN
//   PHYSICIAN
//   RESIDENT
//   APP
//   USER
// }

// model Zone {
//   zoneId      String    @id @default(uuid())
//   createdAt   DateTime  @default(now())
//   updatedAt   DateTime  @updatedAt
//   name        String
//   order       Int
//   instruction String
//   type        ZoneType
//   site        Site      @relation(fields: [siteId], references: [site])
//   siteId      String
//   supervises  Zone[]    @relation("Supervise")
//   superFrom   Zone      @relation("Supervise", fields: [superFromId], references: [zoneId])
//   superFromId String
//   shifts      Shift[]
// }

// enum ZoneType {
//   ZONE
//   ZONE_PATIENT
//   FT_ZONE_PATIENT
//   ROTATION
//   ROTATION_SUPER
// }

model Patient {
  patientId     String   @id @default(uuid()) // need to provide UUID from client
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  mode          String
  siteRel       Site     @relation(fields: [site], references: [site])
  site          String
  provider      String // shift name
  supervisor    String // shift name
}

model Log {
  logId       Int   @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  date        String
  shift       String // shift name
  provider    String
  patients    Int
  supervised  Int
  siteRel     Site @relation(fields: [site], references: [site])
  site        String
}
